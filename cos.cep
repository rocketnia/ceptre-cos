
% Binary constructors
binaryConstructor : type.
mc2 : binaryConstructor.  % binary multiplicative conjunction (times)
md2 : binaryConstructor.  % binary multiplicative disjunction (par)
ad2 : binaryConstructor.  % binary additive disjunction (plus)
ac2 : binaryConstructor.  % binary additive conjunction (with)

% Paths
path : type.
path0 binaryConstructor path : path.
path1 binaryConstructor path : path.

% Structures
structure : type.
bi binaryConstructor structure structure : structure.

% Atomic structures
atom : type.
pa atom : structure.
na atom : structure.

% Nullary constructors
mc0 : atom.  % unit of multiplicative conjunction (one)
md0 : atom.  % unit of multiplicative disjunction (bottom)
ad0 : atom.  % unit of additive disjunction (zero)
ac0 : atom.  % unit of additive conjunction (top)

% Embedding a single structure as a set of Ceptre predicates
root : path.
at path structure : pred.

% Extra atoms
r : atom.
u : atom.
t : atom.


stage main = {


% Structural representation
elim_cons
  : at P (bi C S0 S1) -o at (path0 C P) S0 * at (path1 C P) S1.
intr_cons
  : at (path0 C P) S0 * at (path1 C P) S1 -o at P (bi C S0 S1).

% Equivalences
negatom_mc : at P (pa mc0) -o at P (na md0).
negatom_md : at P (pa md0) -o at P (na mc0).
negatom_ad : at P (pa ad0) -o at P (na ac0).
negatom_ac : at P (pa ac0) -o at P (na ad0).
elim_unit_mc : at P (bi mc2 (pa mc0) A) -o at P A.
intr_unit_mc : at P A -o at P (bi mc2 (pa mc0) A).
elim_unit_md : at P (bi md2 (pa md0) A) -o at P A.
intr_unit_md : at P A -o at P (bi md2 (pa md0) A).
elim_unit_ad : at P (bi ad2 (pa ad0) A) -o at P A.
intr_unit_ad : at P A -o at P (bi ad2 (pa ad0) A).
elim_unit_ac : at P (bi ac2 (pa ac0) A) -o at P A.
intr_unit_ac : at P A -o at P (bi ac2 (pa ac0) A).
commute_mc : at P (bi mc2 A B) -o at P (bi mc2 B A).
commute_md : at P (bi md2 A B) -o at P (bi md2 B A).
commute_ad : at P (bi ad2 A B) -o at P (bi ad2 B A).
commute_ac : at P (bi ac2 A B) -o at P (bi ac2 B A).
assocr_mc
  : at P (bi mc2 (bi mc2 A B) C) -o at P (bi mc2 A (bi mc2 B C)).
assocr_md
  : at P (bi md2 (bi md2 A B) C) -o at P (bi md2 A (bi md2 B C)).
assocr_ad
  : at P (bi ad2 (bi ad2 A B) C) -o at P (bi ad2 A (bi ad2 B C)).
assocr_ac
  : at P (bi ac2 (bi ac2 A B) C) -o at P (bi ac2 A (bi ac2 B C)).


% Rules
% (based on system SALS from "A Local System for Linear Logic")

% TODO: Figure out how to represent these atoms. For now, we just
% duplicate the rules for each atom type. See the "Extra atoms"
% section below.
% ()
% [a -a]
%axiom : at P (pa md0) -o at P (bi mc2 (pa A) (na A)).
ax_mc : at P (pa mc0) -o at P (bi md2 (pa mc0) (na mc0)).
ax_md : at P (pa mc0) -o at P (bi md2 (pa md0) (na md0)).
ax_ad : at P (pa mc0) -o at P (bi md2 (pa ad0) (na ad0)).
ax_ac : at P (pa mc0) -o at P (bi md2 (pa ac0) (na ac0)).
% (a -a)
% []
cut : at P (bi mc2 (pa A) (na A)) -o at P (pa md0).

% ([R U] T)
% [(R T) U]
switch : at P (bi mc2 (bi md2 R U) T) -o at P (bi md2 (bi mc2 R T) U).

% +([R U] [T V])
% [+(R T) +[U V]]
dn_medial
  : at P (bi ac2 (bi md2 R U) (bi md2 T V)) -o
    at P (bi md2 (bi md2 R T) (bi ad2 U V)).
% (+[R U] +(T V))
% +[(R T) (U V)]
up_medial
  : at P (bi mc2 (bi ad2 R U) (bi ac2 T V)) -o
    at P (bi ad2 (bi mc2 R T) (bi mc2 U V)).

% +[]
% R
% TODO: Ceptre doesn't allow this one because R is bound in the
% conclusion and not the premise. Okay, use the local system instead
% of SALS.
%dn_merge0 : at P (pa ad0) -o at P R.
% R
% +()
up_merge0 : at P R -o at P (pa ac0).

% +[R R]
% R
dn_merge2 : at P (bi ad2 R R) -o at P R.
% R
% +(R R)
up_merge2 : at P R -o at P (bi ac2 R R).


% Embedding a single structure as a set of Ceptre predicates
win : at root (pa md0) -o ().

% Extra atoms
ax_r : at P (pa mc0) -o at P (bi md2 (pa r) (na r)).
ax_u : at P (pa mc0) -o at P (bi md2 (pa u) (na u)).
ax_t : at P (pa mc0) -o at P (bi md2 (pa t) (na t)).

}
#interactive main.


% Demo
%
% In this demo, the player is posed with an expression of the switch
% rule as a structure that can be proven by reducing it to []. This
% doesn't "prove" anything since we have access to the switch rule
% itself during the proof, but it lets the player get a feel for
% proving simple theorems in this system.
%
% Strategy guide:
% (([R U] T) ([-R -T] -U))
% ([(R T) U] ([-R -T] -U))  % switch
% (([(R T) U] -U) [-R -T])
% ([(R T) (U -U)] [-R -T])  % switch
% ([(R T) []] [-R -T])
% ((R T) [-R -T])
% (T (R [-R -T]))
% (T [(R -R) -T])  % switch
% (T [[] -T])
% (T -T)
% []
%
context ctx_try_to_prove_switch_as_a_theorem = {
  at root
    (bi mc2
      % Positive form of ([R U] T)
      (bi mc2 (bi md2 (pa r) (pa u)) (pa t))
      
      % Negative form of [(R T) U]
      (bi mc2 (bi md2 (na r) (na t)) (na u)))
}

#trace _ main ctx_try_to_prove_switch_as_a_theorem.
